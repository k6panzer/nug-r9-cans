'TRR Migration script for PNE Rules system.
' Migrates the RDM SPs to approximate TRR SPs for each of the rules in the PNE DB
'
'author: Tim Markello
'date: 8/1/2013
'
'Prep Work:
'  Add a new DST to the PNE DB
'  Map pne_db to local PNE DB number
'  Map pne.msa to a dst that distiguishes between child and adult PNE Rules
'  Map msa_child and msa_adult to the distiguising values for pne.msa
'  Basic RDM to TRR mapping is configured. Additional mapping required if you use
'     modifiers on the RDM SPs (DENTON)
'
'Script version 0.0 compiled with GCC configuration
'

%version 0.0 8/1/2013 TxAce
start PNEtoTRR(parmfile, option, regid, retcode)

parmfile    is x
option      is x
regid       is x
retcode     is b

pne_db      is b
pne.msa     is x
pne.rdm     is x
pne.trr     is x

rdm_a_sp[]    is x
trr_a_sp[]    is x
rdm_c_sp[]    is x
trr_c_sp[]    is x

rdm_lookup     is x
trr_lookup     is x

msa_child      is x
msa_adult      is x

rc          is b
i           is b

read-id     is x

pne_db = "59"
pne.rdm = "PNE.SP"
pne.trr = "PNE.TRRSP"
pne.msa = "PNE.MSA"

msa_child = "MHC"
msa_adult = "MHA"

rdm_a_sp[1] = "0"
rdm_a_sp[2] = "1"
rdm_a_sp[3] = "2"
rdm_a_sp[4] = "3"
rdm_a_sp[5] = "4"
rdm_a_sp[6] = "5"
rdm_a_sp[7] = "8"

trr_a_sp[1] = "100"
trr_a_sp[2] = "111,112"
trr_a_sp[3] = "113"
trr_a_sp[4] = "114"
trr_a_sp[5] = "115"
trr_a_sp[6] = "106"
trr_a_sp[7] = "109"

rdm_c_sp[1] = "0"
rdm_c_sp[2] = "1.1"
rdm_c_sp[3] = "1.2"
rdm_c_sp[4] = "2.1"
rdm_c_sp[5] = "2.2"
rdm_c_sp[6] = "2.3"
rdm_c_sp[7] = "2.4"
rdm_c_sp[8] = "4"
rdm_c_sp[9] = "5"
rdm_c_sp[10] = "8"

trr_c_sp[1] = "100"
trr_c_sp[2] = "102,YC"
trr_c_sp[3] = "102,YC"
trr_c_sp[4] = "104"
trr_c_sp[5] = "103"
trr_c_sp[6] = "103"
trr_c_sp[7] = "104"
trr_c_sp[8] = "101"
trr_c_sp[9] = "106"
trr_c_sp[10] = "109"

getparm(parmfile)
getoption(option)

$setvarname(pne.rdm, pne.rdm)
$setvarname(pne.trr, pne.trr)
$setvarname(pne.msa, pne.msa)

read-id = regid

if read-id !dp then
   rc = $dbstart(pne_db, read-id)
endif

'migrate the registers
$dblock()
rc = $dbread(pne_db, read-id, pne.rdm, pne.trr, pne.msa)
gosub _REC-PROC

$dblock()
rc = $dbreadnext(pne_db, read-id, pne.rdm, pne.trr, pne.msa)
if regid dp then rc = 99 endif   'stop migration if we specified a single reg

do while rc < 2
   gosub _REC-PROC
   $dblock()
   rc = $dbreadnext(pne_db, read-id, pne.rdm, pne.trr, pne.msa)
enddo
'dones
return

'subroutine
_REC-PROC:

   'only migrate registers with presently set.
   if pne.rdm dp then
      
      pne.trr = "," + pne.rdm + ","  'wrap values with commas to ensure appropriate matching
      i = 0
      do while i < `$len(pne.rdm) + 1`
         rdm_lookup = $parse(pne.rdm, i, ",")
         
         'make the migration based on the 'major service area'
         if pne.msa = msa_child then
            rc = $find(rdm_lookup, rdm_c_sp[], 1, "F")
            trr_lookup = "," + trr_c_sp[rc] + ","
         else
            rc = $find(rdm_lookup, rdm_a_sp[], 1, "F")
            trr_lookup = "," + trr_a_sp[rc] + ","
         endif
         
         'just get rid of the rdm sp if the trr sp is already there
         if $find(trr_lookup, pne.trr, 1, "F") != 0 then
            trr_lookup = ","
         endif
         rdm_lookup = "," + rdm_lookup + ","
         pne.trr = $replace(rdm_lookup, trr_lookup, pne.trr)
      enddo
      
      'strip off the wrapper commas
      pne.trr = $seg(pne.trr, 2, `$len(pne.trr) - 2`)
      
      rc = $dbadddst(pne_db, read-id, pne.trr)
   endif

goback

end PNEtoTRR

%include inc_GetParm
%include inc_GetOption