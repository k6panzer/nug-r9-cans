'library for handling db reading with a dstlist
'Author: Tim Markello
'  Date: 3/21/2011library lib_DST()
'
'------------------------------------------------
' Modifications:
'
' TJM 12/14/11 .001
'  ~ changed dst() to loop through all passed dst names 
'     to insert values in the correct location
'  + added dst[] argument to read() so that setDsts() does
'     not have to be called seperately
'  + lock option added to read(), next() and nextrec() to
'     lock the db while reading
'  + New Functions
'     + put() inserts new values into dst list
'     + add() adds new layer to db
'     + unlock() $dbunlock()
' TJM 02/03/12 .002
'  + added readList dstlist. a copy of masterlist, but for reading
'     so values updated by put() don't get blown away
'  + added updateByValue()
'     + tries to find the layer to update by matching a list of 
'        dstname + value pairs to the dst + values of the current
'        layer. 
'     * Dsts identified as matching dst that is not found
'        in the master list are ignored. 
'     * If no valid matching dsts are specified an update is not attempted
'        no valid dsts rc = 99
'     * All criteria must match for update to occur 
'        no match rc = 88
'     * Update is attempted if matching layer is found
'        rc = $dbupdate rc
' TJM 02/08/12 .003
'  ~ some fixes to updateByValue()
' TJM 03/29/12 .004
'  ~ list() to private function to correct possible endless loop with setDsts() and list() calling
'  ~ fixes to check() to allow the record header dst to be in the dst list
'  + added _masterHead and _masterDesc variables for storing the dsts record headers and descriptions
'  + added effd() and head() functions to return dst's effective date or record header respectively after a read(), 
'     next() or nextrec()
'  + added listinfo() to control the looping through dstname[] arguments to return the dst values and 'meta' data.
'     dst(), effd() and head() now all reference this function when they are past a list of dsts to process.
'------------------------------------------------
'Benefits to using this lib over simple dbreads
' 1. check() will verify the list of dsts are valid
'    dsts to your system. AND insert record header
'    dsts into the list.
'    This means main script / programmer / parm configuration
'    does not need to worry about record headers - just
'    the dsts important to the script
' 2. dst(name) will return the dst value for argument 'name'
'    If using a dst list in main script it would have to
'    have some kind of lookup based on the list index to
'    find the needed value.
' 3. db, read registers, list var, list values, and list effdates
'    do not have to be declaired in the main script.
'
'****TO USE:
'    The dst list must be set by calling setDsts() or list() functions
'    with the dst[] argument present BEFORE calling any read functions
'****
'
'TO DO:
'    - Figure out some way to write the data in a useful way.
'------------------------------------------------------------------------

%version 01.0.004 03/29/12 GCC

library lib_DST()

on load do:
   
   _masterList     is dstlist
   _masterDsts[]   is x
   _masterValues[] is x
   _masterEffdate[]  is d
   _masterHead[]     is x
   _masterDesc[]     is x
   
   %global _masterList, _masterDsts[], _masterValues[], _masterEffdate[], _masterHead[], _masterDesc[]
   
   _readList      is dstlist
   _readDsts[]    is x
   _readValues[]  is x
   _readEffdate[] is d
   
   %global _readList,  _readDsts, _readValues[], _readEffDate[]
   
   _masterReg     is x
   _masterDB      is b
   
   %global _masterReg, _masterDB
   
   _masterCnt     is b
   
   %global _masterCnt
   
return

'-------------------------------------------------
public dynamic function setDsts(dsts[]) is null
dsts[]   is x
head[]   is x
desc[]   is x
$clear(_masterDSTs[], _masterDB) '_masterValues[], _masterEffdate[], _masterHead[], _masterDesc[]
_masterDsts[] = check(dsts[],head[],desc[])[]
_masterHead[] = head[]
_masterDesc[] = desc[]
_masterCnt = $maxarray(_masterDsts[])
list()
end setDsts

'-------------------------------------------------
public dynamic function setReg(register) is null
register is x
_masterReg = register
'(void)$dbstart(_masterDB, _masterReg)
end setReg


'-------------------------------------------------
public dynamic function check(dsts[],recname[],desc[])[] is x
dsts[]         is x
recname[]      is x
desc[]         is x
i              is b
j              is b
temp[]         is x
dstInfo[]      is x
'$allowupdate(dsts[])
$allowupdate(recname[], desc[])
$clear(temp[],recname[],desc[])
(void)$sortu(dsts[],"D")
i = 0
do while i++ < $maxarray(dsts[])
   if $dstinfo($uc(dsts[i]),dstinfo[]) = 0 then
      if _masterDB !dp then
         _masterDB = $num(dstinfo[4])
      endif
      'make sure all of the dsts are in the same db to prevent read errors
      if _masterDB = $num(dstinfo[4]) then
         
         'check to see if the record head is present
         if dstInfo[16] dp then
            j = $find(dstInfo[16], temp[], 1, "F")
            if j = 0 then
               'add the records head if it is missing
               (void)$arrPush(temp[], `$uc(dstInfo[16])`)
               j = $maxarray(temp[])
               (void)$arrInsert(recname[j], `$uc(dstInfo[16])`)
               '(void)$arrInsert(desc[j], dstInfo[3])
           endif
            j++
   '         (void)$arrInsert(temp[++j], `$uc(dsts[i])`)
         else
            j = 1
   '         (void)$arrInsert(temp[1], `$uc(dsts[i])`)
         endif
         if $uc(dsts[i]) != dstInfo[16] then
            (void)$arrInsert(temp[j], `$uc(dsts[i])`)
            (void)$arrInsert(recname[j], `$uc(dstInfo[16])`)
            (void)$arrInsert(desc[j], dstInfo[3])
         else
            '(void)$arrInsert(desc[--j], dstInfo[3])
            desc[--j] = dstInfo[3]
         endif
      endif
   else
      'allow user to remap??
'      $clear(dstlist[i])
   endif
enddo
'i = 0
'do while i++ < $maxarray(temp[])
'   check[i] = temp[i]
'enddo
check[] = temp[]
end check


'-------------------------------------------------
'public dynamic function list(dsts[], values[], effdates[]) is b
private dynamic function list() is b 'dsts[], values[], effdates[]) is b
'dsts[]      is x
'values[]    is x
'effdates[]  is d

'if dsts[] dp then setDsts(dsts[]) endif
_readDsts[] = _masterdsts[]
list = $dstlist( _masterList, _masterDb, _masterDsts[], _masterValues[], _masterEffdate[])
list = $dstlist( _readList,   _masterDB, _readDsts[], _readValues[],    _readEffDate[])

end list


'-------------------------------------------------
public dynamic function rmi_read(parmfile, option, client, retcode) is x
parmfile    is x
option      is x
client      is x
retcode     is x

rmi_readdst[]   is x
rmi_val[]   is x

rmi_r_all   is x
$allowupdate(retcode)
getparm(parmfile)
getoption(option)

retcode = read(client, rmi_readdst[])
rmi_val[] = dst(rmi_readdst[])[]
rmi_read = toJSON(rmi_readdst[], rmi_val[])
if $uc(rmi_r_all) = "Y" then
   rmi_read = "[" + rmi_read
   retcode = nextRec(client, rmi_readdst[])
   do while retcode < 2
      rmi_val[] = dst(rmi_readdst[])
      rmi_read += "," + toJSON(rmi_readdst[], rmi_val[])
      retcode = nextRec(client, rmi_readdst[])
   enddo
   rmi_read += "]"
endif
end rmi_read

'-------------------------------------------------
public dynamic function rmi_add(parmfile, option, client, retcode) is x
parmfile    is x
option      is x
client      is x
retcode     is x

rmi_adddst[]   is x
rmi_addval[]   is x

$allowupdate(retcode)
getparm(parmfile)
getoption(option)

retcode = add(client, rmi_adddst[], rmi_addval[])

if retcode > 0 then
   $clear(rmi_addval[])
endif

rmi_add = toJSON(rmi_adddst[], rmi_addval[])
end rmi_add


'-------------------------------------------------
public dynamic function rmi_update(parmfile, option, client, retcode) is x
parmfile    is x
option      is x
client      is x
retcode     is x

rmi_uiddst[]   is x
rmi_uidval[]   is x
rmi_newval[]   is x

$allowupdate(retcode)
getparm(parmfile)
getoption(option)

retcode = updateByValue(client,rmi_uiddst[],rmi_uidval[], rmi_uiddst[], rmi_newval[])

if retcode > 0 then
   $clear(rmi_newval[])
endif

rmi_update = toJSON(rmi_uiddst[], rmi_newval[])
end rmi_update


'-------------------------------------------------
public dynamic function toJSON(key[], value[]) is x
key[]    is x
value[]  is x
i        is b
i = 0
toJSON = "{"
do while ++i < $maxarray(key[])
   value[i] = value[i]
   toJSON += x"22" + key[i] + x"22" + ":" + x"22" + $replace(x"22", `"\" + x"22"`, value[i]) + x"22" + ","
enddo
toJSON += x"22" + key[i] + x"22" + ":" + x"22" + $replace(x"22", `"\" + x"22"`, value[i]) + x"22" + "}"
end toJSON


'-------------------------------------------------
public dynamic function read(register,dst[],lock) is b
register    is x
dst[]       is x
lock        is x

if register dp then setReg(register) endif

if _masterReg !dp then (void)$dbstart(_masterDB, _masterReg) endif

if dst[] dp then setDsts(dst[]) endif

if lock = "Y" then $dblock() endif 

read = $dbread(_masterDB, _masterReg, _masterList)
end read

'-------------------------------------------------
public dynamic function next(lock) is b
lock        is x

if lock = "Y" then $dblock() endif 
next = $dbreadnext(_masterDB, _masterReg, _masterList)
end next

'-------------------------------------------------
public dynamic function nextRec(lock) is b
lock        is x

if lock = "Y" then $dblock() endif 
nextRec = $dbreadnextdst(_masterDB, _masterReg, _masterList)
end nextRec

'-------------------------------------------------
public dynamic function unlock() is null
$dbunlock()
end unlock

'-------------------------------------------------
public dynamic function reg() is x
reg = _masterReg
end reg

'-------------------------------------------------
public dynamic function updateByValue(register,uid-dst[],uid-value[], dst[], value[]) is b
register    is x
uid-dst[]     is x
uid-value[]   is x
dst[]       is x
value[]     is x
dst-idx[]     is b
rc             is b
idx            is b
i              is b
match          is x
temp[]         is x
tempeff[]      is d
if register dp then setReg(register) endif

rc = 0
do while rc++ < $maxarray(uid-dst[])
   dst-idx[rc] = $find($uc(uid-dst[rc]), _masterDsts[], 1, "F")
   if dst-idx[rc] = 0 then
      $clear(dst-idx[rc])
   endif
enddo
if dst-idx[] !dp then
   updateByValue = 99
   return
endif

$dblock()
rc = $dbread(_masterDB, _masterReg, _masterList)
do while rc < 2
   $clear(match)
   i = 0
   do while i++ < $maxarray(dst-idx[])
      if dst-idx[i] dp then
         idx = dst-idx[i]
         _masterValues[idx] = _mastervalues[idx]
         uid-value[i] = uid-value[i]
         if _masterValues[idx] != uid-value[i] then
            match = "N"
            i = $maxarray(dst-idx[])
         endif
      endif
   enddo
   if match = "N" then
      rc = $dbreadnextdst(_masterDB, _masterReg, _masterList)
   else
      rc = 99
      put(dst[],value[])
      updateByValue = $dbupdate(_masterDB, _masterReg, _masterList)
      return
   endif
enddo
updateByValue = 88
end updateByValue
   
      
   
'-------------------------------------------------
public dynamic function add(register,dst[],value[]) is b
register    is x
dst[]       is x
value[]     is x
i is b

$allowupdate(value[])
if register dp then
   setReg(register)
endif
if _masterDsts[] !dp then setDsts(dst[]) endif
if dst[] dp and value[] dp then
   put(dst[], value[])
endif
$clear(_mastereffdate[])
$dblock()
(void)$dbpoint(_masterDB, _masterReg)
add = $dbadddst(_masterDB, _masterReg,_masterLIst)
(void)$dbread(_masterDB, _masterReg,_masterLIst)
value[] = dst(dst[])
end add


'-------------------------------------------------
public dynamic function put(dst[],value[]) is null
dst[]       is x
value[]     is x
i           is b
ptr         is b

i = 0
do while i++ < $maxarray(dst[])
   ptr = $find($uc(dst[i]), _masterDsts[], 1, "F")
   if ptr > 0 then
      _masterValues[ptr] = value[i]
   endif
enddo
end put

'-------------------------------------------------
public dynamic function dst(dstname[])[] is x
dstname[]   is v
'myVal       is x
i           is b
j           is b
varname     is x

varname = $varname(dstname[])
varname = $uc(varname)
i = $find(varname, _masterDsts[],1,"F")
if i > 0 then 
   dst[1] = _masterValues[i] 
else
    listinfo(dstname[],dst[])
endif
end dst


'-------------------------------------------------
public dynamic function effd(dstname[])[] is x
dstname[]   is v
'myVal       is x
i           is b
j           is b
varname     is x

varname = $varname(dstname[])
varname = $uc(varname)
i = $find(varname, _masterDsts[],1,"F")
if i > 0 then 
   effd[1] = _masterEffdate[i] 
else
   listinfo(dstname[],,effd[])
endif
end effd


'-------------------------------------------------
public dynamic function head(dstname[])[] is x
dstname[]   is v
'myVal       is x
i           is b
j           is b
varname     is x

varname = $varname(dstname[])
varname = $uc(varname)
i = $find(varname, _masterDsts[],1,"F")
if i > 0 then 
   head[1] = _masterHead[i] 
else
    listinfo(dstname[],,,head[])
endif
end head

'---------------------------------------------------
public dynamic function listinfo(name[], valu[], effd[], head[], desc[]) is null
name[]      is x
valu[]      is x
effd[]      is d
head[]      is x
desc[]      is x
j           is b
i           is b
$allowupdate(valu[], effd[], head[],desc[])
j = 0
do while j++ < $maxarray(name[])
   i = $find($uc(name[j]), _masterDSTs[], 1, "F")
   if i > 0 then
      if _masterValues[i] dp then
         valu[j] = _masterValues[i]
         effd[j] = _masterEffdate[i]
      endif
         head[j] = _masterHead[i]
         desc[j] = _masterDesc[i]
   endif
enddo

end listinfo

%include inc_GetParm
%include inc_GetOption