'RDM to TRR Migration to mimic the DSHS' CARE to CMBHS Migration
' DSHS Specs: https://cmbhslst.dshs.state.tx.us/cmbhs/Documents/Migration/
'
'Tim Markello
'7/17/2013
' 0.0.0.0
'
'Assumptions
'  DB does not contain any current TRR UA records
'
'Dependencies
'  None
'
'Deviations from DSHS Specs
'  Script does not update the 'migration' record with any assessment data -- 
'     only assessment meta data ( type, date, end date, loc, etc)
'
'Configuration
'  DST short names must be mapped to ensure successful migration

%version 0.0.0.8 7/18/2013 gcc

start RDMtoTRR(parmfile, option, clientid, retcode)
'arguments
parmfile          is x
option            is x
clientid          is x
retcode           is b

'options
auditOnly         is x
doReport          is x
migrate_date      is d

er_crisis_flags[] is x
er_crisis_crit[]  is x

trr_a_crisi       is b
trr_a_trans       is b
trr_a_medis       is b
trr_a_skill       is b
trr_a_basic       is b
trr_a_inten       is b
trr_a_asser       is b      
trr_a_waits       is b

trr_c_crisi       is b
trr_c_medis       is b
trr_c_targe       is b
trr_c_compl       is b
trr_c_inten       is b
trr_c_trans       is b
trr_c_young       is b
trr_c_yesss       is b
trr_c_waits       is b

rdm_a_0           is b
rdm_a_1           is b
rdm_a_2           is b
rdm_a_3           is b
rdm_a_4           is b
rdm_a_5           is b
rdm_a_8           is b

rdm_c_0           is b
rdm_c_5           is b
rdm_c_8           is b

trr_days_by_loc[] is x

migrate_a_table[] is x
migrate_c_table[] is x

trr_type_table[]  is x

rdm_disch_type    is x
rdm_update_type   is x
rdm_intake_type   is x
rdm_crisis_type   is x

trr_crisis_type   is b
trr_update_type   is b
trr_intake_type   is b
trr_disch_type    is b

'dsts definitions
clientdb          is b
c.age             is v

'rdm ua
rdm.a.rec         is v
rdm.a.date        is v
rdm.a.type        is x
rdm.a.loca        is x
rdm.a.locr        is x
rdm.a.harm        is x
rdm.a.supp        is x
rdm.a.hosp        is x
rdm.a.impr        is x
rdm.a.empl        is x
rdm.a.hous        is x
rdm.a.cops        is x
rdm.a.crim        is x
rdm.a.meds        is x

rdm.c.rec         is v
rdm.c.date        is v
rdm.c.type        is x
rdm.c.loca        is x
rdm.c.tcom        is x
rdm.c.jj          is x

'trr us rec
trr.a.rec         is v
trr.a.date        is v
trr.a.endd        is v
trr.a.type        is x
trr.a.loca        is x
trr.a.locr        is x
trr.a.locd        is x
trr.a.devo        is x
trr.a.astf        is x

trr.c.rec         is v
trr.c.date        is v
trr.c.endd        is v
trr.c.type        is x
trr.c.loca        is x
trr.c.locr        is x
trr.c.locd        is x
trr.c.devo        is x
trr.c.astf        is x

trr.def.dreaso    is x
trr.def.astaff    is x

'private
read-id           is x
rdm-rec[]         is x
rdm-val[]         is x
trr-rec[]         is x
trr-val[]         is x
last-ua-type      is x
last-ua-date      is d

er-obj            is x
er-crisis-vals[]  is x
er-crit           is x

rc                is b
i                 is b

$setvartype(c.age, "X")
$setvartype(rdm.a.rec, "X")
$setvartype(rdm.a.date, "X")
$setvartype(rdm.c.rec, "X")
$setvartype(rdm.c.date, "X")
$setvartype(trr.a.rec, "X")
$setvartype(trr.a.date, "X")
$setvartype(trr.a.endd, "X")
$setvartype(trr.c.rec, "X")
$setvartype(trr.c.date, "X")
$setvartype(trr.c.endd, "X")

migrate_date = 9/1/2013
auditOnly = "Y"
doReport = "Y"

trr.def.dreaso = "MIGRATION"
trr.def.astaff = "MIGRATION"

'loc values
trr_a_crisi = 100
trr_a_trans = 106
trr_a_medis = 111
trr_a_skill = 112
trr_a_basic = 113
trr_a_inten = 114
trr_a_asser = 115
trr_a_waits = 109

trr_c_crisi = 100
trr_c_medis = 101
trr_c_targe = 102
trr_c_compl = 103
trr_c_inten = 104
trr_c_trans = 106
trr_c_young = 105
trr_c_yesss = 107
trr_c_waits = 109

'set the current rdm loc values to be 'value + 10'
'  since arrays are not zero indexed
rdm_a_0 = 10
rdm_a_1 = 11
rdm_a_2 = 12
rdm_a_3 = 13
rdm_a_4 = 14
rdm_a_5 = 15
rdm_a_8 = 18

rdm_c_0 = 10
rdm_c_5 = 15
rdm_c_8 = 18

rdm_disch_type = "D"
rdm_update_type = "U"
rdm_intake_type = "I"
rdm_crisis_type = "E"

' crisis flags
er_crisis_flags[1] = "E.RU"
er_crisis_flags[2] = "E.PROJ"

er_crisis_crit[1] = "5422"
er_crisis_crit[2] = "51,52"

'dst defaults
clientdb = 2
c.age      = "C.AGE"
'adult rdm
rdm.a.rec  = "C.UABD"
rdm.a.type = "C.UABD.PUR"
rdm.a.date = "C.UABD.DATE1"
rdm.a.loca = "C.UABD.ALOC"
rdm.a.locr = "C.UABD.RLOC"
rdm.a.harm = "C.UABD.HARM"
rdm.a.supp = "C.UABD.SUPP"
rdm.a.hosp = "C.UABD.HOSP"
rdm.a.impr = "C.UABD.IMPAIR"
rdm.a.empl = "C.UABD.EMP"
rdm.a.hous = "C.UABD.HOUS"
rdm.a.cops = "C.UABD.COPSD"
rdm.a.crim = "C.UABD.CRIM"
rdm.a.meds = "C.UABD.MED"
'child rdm
rdm.c.rec  = "C.CABD.REC"
rdm.c.loca = "C.CABD.ALOC"
rdm.c.type = "C.CABD.ASS"
rdm.c.date = "C.CABD.DATE3"
rdm.c.tcom = "C.CABD.TCOOMI"
rdm.c.jj   = "C.CABD.JJ"
'adult trr
trr.a.rec  = "C.ANSA.REC"
trr.a.loca = "C.ANSA.ALOC"
trr.a.locd = "C.ANSA.DLOC"
trr.a.locr = "C.ANSA.RLOC"
trr.a.date = "C.ANSA.ALOCDATE"
trr.a.endd = "C.ANSA.ALOCEDATE"
trr.a.devo = "C.ANSA.DEVOTH"
'child trr
trr.c.rec  = "C.CANS.REC"
trr.c.loca = "C.CANS.ALOC"
trr.c.locd = "C.CANS.DLOC"
trr.c.locr = "C.CANS.RLOC"

trr_crisis_type = 11
trr_intake_type = 1
trr_update_type = 2
trr_disch_type = 3

getparm(parmfile)
getoption(option)

$setvarname(c.age     , c.age     )
$setvarname(rdm.a.rec , rdm.a.rec )
$setvarname(rdm.a.type, rdm.a.type)
$setvarname(rdm.a.date, rdm.a.date)
$setvarname(rdm.a.loca, rdm.a.loca)
$setvarname(rdm.a.locr, rdm.a.locr)
$setvarname(rdm.a.harm, rdm.a.harm)
$setvarname(rdm.a.supp, rdm.a.supp)
$setvarname(rdm.a.hosp, rdm.a.hosp)
$setvarname(rdm.a.impr, rdm.a.impr)
$setvarname(rdm.a.empl, rdm.a.empl)
$setvarname(rdm.a.hous, rdm.a.hous)
$setvarname(rdm.a.cops, rdm.a.cops)
$setvarname(rdm.a.crim, rdm.a.crim)
$setvarname(rdm.a.meds, rdm.a.meds)
$setvarname(rdm.c.rec , rdm.c.rec )
$setvarname(rdm.c.loca, rdm.c.loca)
$setvarname(rdm.c.type, rdm.c.type)
$setvarname(rdm.c.date, rdm.c.date)
$setvarname(rdm.c.tcom, rdm.c.tcom)
$setvarname(rdm.c.jj  , rdm.c.jj  )

$setvarname(trr.a.rec , trr.a.rec )  
$setvarname(trr.a.loca, trr.a.loca)  
$setvarname(trr.a.locd, trr.a.locd)  
$setvarname(trr.a.locr, trr.a.locr)  
$setvarname(trr.a.date, trr.a.date)  
$setvarname(trr.a.endd, trr.a.endd)  
$setvarname(trr.a.devo, trr.a.devo)  

$setvarname(trr.c.rec , trr.c.rec )  
$setvarname(trr.c.loca, trr.c.loca)  
$setvarname(trr.c.locd, trr.c.locd)  
$setvarname(trr.c.locr, trr.c.locr)  


$setvartype(c.age, "B")
$setvartype(rdm.a.rec, "H")
$setvartype(rdm.a.date, "D")
$setvartype(rdm.c.rec, "H")
$setvartype(rdm.c.date, "D")
$setvartype(trr.a.rec, "H")
$setvartype(trr.a.date, "D")
$setvartype(trr.a.endd, "D")
$setvartype(trr.c.rec, "H")
$setvartype(trr.c.date, "D")
$setvartype(trr.c.endd, "D")

'migration record defaults
trr.def.dreaso = "MIGRATION"
trr.def.astaff = "MIGRATION"

'end day caluclation table
trr_days_by_loc[trr_a_crisi] = 7
trr_days_by_loc[trr_a_trans] = 90
trr_days_by_loc[trr_a_medis] = 90
trr_days_by_loc[trr_a_skill] = 90
trr_days_by_loc[trr_a_basic] = 90
trr_days_by_loc[trr_a_inten] = 90
trr_days_by_loc[trr_a_asser] = 90
trr_days_by_loc[trr_c_medis] = 90
trr_days_by_loc[trr_c_targe] = 90
trr_days_by_loc[trr_c_compl] = 90
trr_days_by_loc[trr_c_inten] = 90
trr_days_by_loc[trr_c_trans] = 90
trr_days_by_loc[trr_c_young] = 90
trr_days_by_loc[trr_c_yesss] = 90

migrate_a_table[rdm_a_0] = trr_a_crisi
migrate_a_table[rdm_a_2] = trr_a_basic
migrate_a_table[rdm_a_3] = trr_a_inten
migrate_a_table[rdm_a_4] = trr_a_asser
migrate_a_table[rdm_a_5] = trr_a_trans
migrate_a_table[rdm_a_8] = trr_a_waits

migrate_c_table[rdm_c_0] = trr_c_crisi
migrate_c_table[rdm_c_5] = trr_c_trans
migrate_c_table[rdm_c_8] = trr_c_waits

trr_type_table[trr_crisis_type] = rdm_crisis_type
trr_type_table[trr_update_type] = rdm_update_type
trr_type_table[trr_intake_type] = rdm_intake_type
trr_type_table[trr_disch_type] = rdm_disch_type

i = 0
do while i++ < $maxarray(er_crisis_crit[])
   er_crisis_crit[i] = "," + er_crisis_crit[i] + ","
enddo

'read the db
if clientid dp then 
   read-id = clientid
else
   rc = $dbstart(clientdb, read-id)
endif

if doReport = "Y" then report("START", rdm.a.type, rdm.a.loca, rdm.c.type, rdm.c.loca, trr.a.loca, trr.c.loca) endif

$dblock()
rc = $dbread(clientdb, read-id, c.age, rdm.a.rec, rdm.a.type, rdm.a.loca, rdm.c.rec, rdm.c.type, rdm.c.loca, rdm.c.tcom, rdm.c.jj)
gosub _REC-PROC

'stop hear or rip through rest of db
$dblock()
rc = $dbreadnext(clientdb, read-id, c.age, rdm.a.rec, rdm.a.loca, rdm.c.rec, rdm.c.loca)
if clientid dp then rc = 99 endif
do while rc < 3
   gosub _REC-PROC
   $dblock()
   rc = $dbreadnext(clientdb, read-id, c.age, rdm.c.rec, rdm.c.loca, rdm.c.rec, rdm.c.loca)
enddo

if doReport = "Y" then report("END") endif

'quit before subroutines
return

'record processing
_REC-PROC:
   'calculate new locr
   if rdm.a.type = rdm_disch_type or rdm.c.type = rdm_disch_type then
      'not migrating inactive clients
   elseif rdm.a.loca dp then
      select rdm.a.loca
         case "1"    '1m or 1s
                     're-read top layer to get all trag scores
                     rc = $dbread(clientdb, read-id, rdm.a.rec, rdm.a.loca, rdm.a.type, 
                        rdm.a.harm, rdm.a.supp,rdm.a.hosp,rdm.a.impr,rdm.a.empl,rdm.a.hous,
                        rdm.a.cops,rdm.a.crim,rdm.a.meds)
                     do while rc < 2
                        select rdm.a.type
                           case rdm_disch_type
                              if last-ua-type dp then
                                 trr.a.loca = trr_a_skill
                              else
                                 'not an active client
                              endif
                           case rdm_intake_type 
                             or rdm_crisis_type
                              if rdm.a.date > 8/30/2012 or rdm.a.loca != "1" or rdm.a.locr != "1" then
                                 trr.a.loca = trr_a_skill
                              endif
                           case other  'must be update
                              if `last-ua-date - rdm.a.date` > 1 
                              or rdm.a.loca != "1" or rdm.a.locr != "1"
                              or (rdm.a.harm != "1"
                              or rdm.a.supp != "1"
                              or rdm.a.hosp != "1"
                              or rdm.a.impr != "1"
                              or rdm.a.empl != "1"
                              or rdm.a.hous != "1"
                              or rdm.a.cops != "1"
                              or rdm.a.crim != "1"
                              or (rdm.a.meds != "1" and rdm.a.meds dp)) then 
                              trr.a.loca = trr_a_skill
                           endif
                        endselect
                        
                        if trr.a.loca !dp then
                           last-ua-type = rdm.a.type
                           last-ua-date = rdm.a.date
                           rc = $dbreadnextdst(clientdb, read-id, rdm.a.rec, rdm.a.loca, rdm.a.type,
                              rdm.a.harm, rdm.a.supp,rdm.a.hosp,rdm.a.impr,rdm.a.empl,rdm.a.hous,
                              rdm.a.cops,rdm.a.crim,rdm.a.meds)

                        else
                           rc = 99
                        endif
                     enddo
                     
                     if trr.a.loca !dp then
                        'look for crisis encounters:
                        rc = $startevents(, read-id, migrate_date)
                        rc = $readnextevent()
                        do while rc = 0
                           rc = $geterrec(er-obj)
                           rc = $getervars(er-obj, er_crisis_flags[], er-crisis-vals[])
                           i = 0
                           do while i++ < $maxarray(er_crisis_flags[])
                              er-crit = "," + er-crisis-vals[i] + ","
                              if $find(er-crit, er_crisis_crit[i], 1, "F") > 0 then
                                 trr.a.loca = trr_a_skill
                                 i = $maxarray(er_crisis_flags[])
                              endif
                           enddo
                           if trr.a.loca dp then
                              rc = 99
                           else
                              rc = $readnextevent()
                           endif
                        enddo
                     endif
                     
                     'auth < 8/31/12 with no gaps or discharges
                     'AND all assessments have locr = 1 and loca = 1
                     'AND all TRAG scores = 1
                     'AND No Crisis encounters = 1 M
                     if trr.a.loca !dp then
                        trr.a.loca = "1M"
                     endif

         case other  trr.a.loca = migrate_a_table[`$casti(rdm.a.loca) + 10`]
      endselect
      trr.a.locr = trr.a.loca
      trr.a.locd = trr.a.loca
      trr.a.type = $find(rdm.a.type, trr_type_table[], 1, "F")
      trr.a.date = rdm.a.date
      trr.a.endd = trr.a.date + trr_days_by_loc[`$casti(trr.a.loca)`]
      trr.a.devo = trr.def.dreaso
      trr.a.astf = trr.def.astaff
   else
      if c.age < 6 then 
         trr.c.loca = trr_c_young
      else
         select rdm.c.loca
            case "1.1"
              or "1.2"  trr.c.loca = trr_c_targe
            case "2.1"  
              or "2.4"  trr.c.loca = trr_c_inten
            case "2.2"
              or "2.3"  if (rdm.c.tcom = "Y" or rdm.c.jj > 2) then 
                           trr.c.loca = trr_c_inten
                        else
                           trr.c.loca = trr_c_compl
                        endif
            case "4"    trr.c.loca = trr_c_medis
            case other  trr.c.loca = migrate_c_table[`$casti(rdm.c.loca) + 10`]
         endselect
      endif
      trr.c.locr = trr.c.loca
      trr.c.locd = trr.c.loca
      trr.c.type = $find(rdm.c.type, trr_type_table[], 1, "F")
      trr.c.date = rdm.c.date
      trr.c.endd = trr.c.date + trr_days_by_loc[`$casti(trr.c.loca)`]
      trr.c.devo = trr.def.dreaso
      trr.a.astf = trr.def.astaff
   endif

   'update trr record
   if auditOnly != "Y" then 
      if trr.a.loca dp then 
         rc = $dbadddst(clientdb, read-id, trr.a.rec, trr.a.type, trr.a.date, trr.a.endd, trr.a.devo, 
            trr.a.astf, trr.a.loca, trr.a.locr, trr.a.locd) 
      elseif trr.c.loca dp then
         rc = $dbadddst(clientdb, read-id, trr.c.rec, trr.c.type, trr.c.date, trr.c.endd, trr.c.devo, 
            trr.c.astf, trr.c.loca, trr.c.locr, trr.c.locd)
      else
         if doReport = "Y" then report(read-id, "calc", "error") endif
      endif
      if rc > 0 and doReport = "Y" then
         report(read-id, "rec", "add", "error")
      endif
   endif
   
   'log report
   if doReport = "Y" then report(read-id, rdm.a.type, rdm.a.loca, rdm.c.type, rdm.c.loca, trr.a.loca, trr.c.loca) endif
goback


end RDMtoTRR

%include inc_GetParm
%include inc_GetOption

static function report(read-id, dst1, dst2, dst3, dst4, dst5, dst6) is binary
read-id        is x
dst1           is v
dst2           is v
dst3           is v
dst4           is v
dst5           is v
dst6           is v

hdr[]          is x
fmt            is x
i              is b
len            is b
reportNbr      is b
print-line     is x


if read-id = "START" then
   hdr[1] = "Date: ^DATE^^C^RDM to TRR Migration Report^R^Page: ^PAGE^"                        ' Header Line 1
   hdr[2] = "Time: ^TIME^^C^"        ' Header Line 2
   hdr[3] = ""                               ' Header Blank Line
   'dynamically create the headers:
   hdr[4] = "ID       "
   hdr[5] = "-------- "
   fmt    = "~~~~~~~~ "
   
   hdr[4] += $varname(dst1) + " "
   hdr[4] += $varname(dst2) + " "
   hdr[4] += $varname(dst3) + " "
   hdr[4] += $varname(dst4) + " "
   hdr[4] += $varname(dst5) + " "
   hdr[4] += $varname(dst6) + " "
   
   len = $len($varname(dst1))
   hdr[5] += $mchar("-", len) + " "
   fmt += $mchar("~", len) + " "
   
   len = $len($varname(dst2))
   hdr[5] += $mchar("-", len) + " "
   fmt += $mchar("~", len) + " "
   
   len = $len($varname(dst3))
   hdr[5] += $mchar("-", len) + " "
   fmt += $mchar("~", len) + " "
   
   len = $len($varname(dst4))
   hdr[5] += $mchar("-", len) + " "
   fmt += $mchar("~", len) + " "
   
   len = $len($varname(dst5))
   hdr[5] += $mchar("-", len) + " "
   fmt += $mchar("~", len) + " "

   len = $len($varname(dst6))
   hdr[5] += $mchar("-", len) + " "
   fmt += $mchar("~", len) + " "

   'open report - 60 lines per page
   reportNbr = $reportavail()
   if reportNbr = 0 then
       $abort(1, "Unable to get a report number")
   endif
    if $report(reportNbr,"RDM to TRR Migration Report",hdr[],60,132) != 0 then
        $abort(2, "Unable to create a report")
    endif
   return
endif

if read-id = "END" then
   report = $closereport(reportNbr)
return
endif

print-line = $format(read-id, dst1, dst2, dst3, dst4, dst5, dst6, fmt)
report = $print(reportNbr, print-line)

end report  
